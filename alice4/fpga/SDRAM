SDRAM notes

- Hardware:
    - IS42S16400J-6TL
    - http://www.issi.com/WW/pdf/42-45S16400J.pdf
    - Not DDR.
    - 4 banks.
    - 16 bits of data.
    - 20 bits of address.
        - 12 bits of row.
            - Verilog file has 13 bits of address. Chip only has 12.
                - http://www.alteraforum.com/forum/showthread.php?t=33038
        - 8 bits of column (256 words per row).
            - Can read 1, 2, 4, 8 locations, or a full page (i.e., until stopped).
    - Total = 1m (addresses) * 16b (bits per word) * 4 (banks) = 64 Mb = 8 MB = 4 MW.
    - Specific parameters (-6TL):
        - -6:
            - CAS latency      MHz     clk     Notes
            -           2      133   7.5ns     Lower latency, but lower burst speed.
            -           3      166     6ns     Higher latency, but higher burst speed.
            - Access time from clock: 5.4ns
        - -T:
            - TSOPII package (as opposed to BGA).
        - -L:
            - Commercial package (as opposed to industrial or automotive).
    - Verilog pins:
        inout   [15:0]  DRAM_DQ;                //  SDRAM Data bus 16 Bits
        output  [12:0]  DRAM_ADDR;              //  SDRAM Address bus 13 Bits
        output          DRAM_LDQM;              //  SDRAM Low-byte Data Mask
        output          DRAM_UDQM;              //  SDRAM High-byte Data Mask
            During READ, LOW to enable output, HIGH for high-Z.
                Must be set two clocks before data is read.
            During WRITE, LOW to enable input, HIGH for disabling input.
                Must be set the same clock as the data.
        output          DRAM_WE_N;              //  SDRAM Write Enable
        output          DRAM_CAS_N;             //  SDRAM Column Address Strobe
        output          DRAM_RAS_N;             //  SDRAM Row Address Strobe
        output          DRAM_CS_N;              //  SDRAM Chip Select
            LOW to enable command input, HIGH to remain in previous state.
            HIGH is the same as LOW with NOP command.
        output          DRAM_BA_0;              //  SDRAM Bank Address 0
        output          DRAM_BA_1;              //  SDRAM Bank Address 1
        output          DRAM_CLK;               //  SDRAM Clock
            All pins (except for CKE) are sampled on rising edge.
        output          DRAM_CKE;               //  SDRAM Clock Enable
            Asynchronous enable/disable for CLK sampling, active-high.
            I don't think we ever want to use this.
- References:
    - TFT:
        - http://www.recontech.co.uk/index.php/projects/series-1-a-lq043t3dx02-display-driver-board/65-series-1-part-8-writing-a-skeletft-lcd-device-driver
        - http://lcdfpga-capantojar.blogspot.com/p/tftlcd-lq043t3dx02-english.html
        - https://github.com/thekroko/ili9341_fpga
        - https://www.altera.com/products/reference-designs/all-reference-designs/computing/ref-tft-lcd-controller-nios-ii.html
    - SDRAM:
        - ftp://ftp.altera.com/up/pub/Altera_Material/13.0/Tutorials/Verilog/DE0/Using_the_SDRAM.pdf
    - FPGA programming:
        - Metastability: https://www.altera.com/content/dam/altera-www/global/en_US/pdfs/literature/wp/wp-01082-quartus-ii-metastability.pdf
- Tutorials:
    - http://www.fpga4fun.com/SDRAM1.html
        - Very clear and simple.
    - https://embeddedmicro.com/tutorials/mojo/sdram
        - Example code (zip file) is fairly messy and hard to follow.
        - Inverts the clock and delays it to get timing right.
        - He did this by trying lots of different values for the delay.
    - https://embeddedmicro.com/tutorials/mojo/timing
        - Linked from the previous tutorial.
        - Good explanation all the various parameters and their restrictions.
    - http://hamsterworks.co.nz/mediawiki/index.php/SDRAM_Memory_Controller
        - Lots of FSM diagrams of increasing complexity.
        - Code is VHDL.
    - http://whoyouvotefor.info/altera_sdram.shtml
        - Uses DE2, which has the same SDRAM chip.
        - Uses 133 MHz clock despite using CAS latency of 3.
            - Uses a 133 MHz clock for all its controller logic.
            - Passes a 133 MHz clock -3ns (of 7.5ns) (delayed?) to the SDRAM clock.
        - Burst length = 2.
        - Uses auto-precharge.
        - Also has test bench, which communicates with controller over wishbone.
        - Somewhat sloppy code, but mostly understandable.
        - Uses "initial" block. Doesn't have reset pin.
        - Probably the closest to what I need, since it's the same chip.
        - Clocks of controller and test bench are different. How does that work?
            Investigate whether wishbone permits this.
- Info:
    - First select bank and row, wait a bit, then repeatedly select column, then close row.
    - Each bank has an active row.
    - Bank select has its own (2) pins.
    - Row and column share (12) pins.
    - Can refresh by sending refresh command, or by opening and closing row.
    - Full page is used with BURST TERMINATE to get arbitrary burst length.
        - This is not very useful since we can get one word per clock anyway. The only
            advantage seems to be that we don't have to increment the address lines.
    - Refresh:
        - Features says 4096 refresh cycles every 64 ms. (4096 is # of rows.)
        - I think this means we have to call REFRESH at least 4096 times every 64 ms.
        - According to the sdram_controller.v file, that's one refresh every 2000
            clocks (of their clocks). They'll go from idle state to refresh if
            that's true before checking if a read or write needs to be done.
        - Assuming 10 clocks per simple operation (tRC), that's 10*clk = 60ns per
            operation. In 64 ms we can do over a million operations. That's a refresh
            every 260 operations, on average (not taking into account the refresh time).
        - Each refresh takes tRC = 60ns = 10clk, so doing 4096 takes 256Âµs, and out of
            each second we're spending 4ms.
        - Note that activating a row refreshes it. Also we don't have to refresh any
            rows we're not using. Oh, but since the REFRESH command doesn't tell us which
            row it's using, that's no good. Unless we ACTIVE each row ourselves manually.
    - Commands (RAS,CAS,WE), see page 7 of PDF:
        - LOAD MODE (000)
            - For setting configuration, like CAS latency, burst length, etc. See page 19 of PDF.
            - A0-A11 select op-code.
            - All banks must be idle.
            - Takes tMRD, then all banks will be idle.
            - Must send NOP during this command.
        - AUTO REFRESH or SELF REFRESH (001)
            - AUTO REFRESH if CKE is HIGH (enabled).
                - Row and bank are automatically generated. Address pins are ignored.
                - All banks must be idle.
                - Takes tRC time, then all banks are idle.
                - Must execute this at least 4096 times every tREF (64ms?).
                - Must send NOP during this command.
            - SELF REFRESH if CKE is LOW (disabled).
                - Must be in this mode at least tRAS time.
                - After returning to CKE HIGH, wait tRC then send two NOP, then AUTO REFRESH.
                - Sounds complicated and unclear, see page 7 of PDF.
                - Probably never want this.
        - PRECHARGE (010)
            - Releases a row.
            - A10 sets all banks (high) or banks specified by BA0,BA1 (low).
            - BA0-BA1 sets bank (if A10 low).
            - Wait tRP after this command, then all banks will be idle.
            - Must send NOP during this command if precharging all.
            - Acts as a NOP if bank is already idle.
        - ACTIVE (011)
            - Activates a row.
            - A0-A11 sets row address.
            - BA0-BA1 sets bank.
            - Wait tRCD after this command.
        - WRITE (100)
            - A0-A7 sets column address.
            - A10 sets "auto precharge".
                - If HIGH, then row will be closed after write burst ends.
                - Only applies to full-page burst writes.
            - BA0-BA1 sets bank.
            - Set DQM the same time as DQ.
        - READ (101)
            - A0-A7 sets column address.
            - A10 sets "auto precharge".
                - If HIGH, then row will be closed after read burst ends.
                - Only applies to full-page burst reads.
            - BA0-BA1 sets bank.
            - Set DQM two clocks before DQ.
        - BURST TERMINATE (110)
            - Terminates in-progress READ or WRITE burst operations on most
              recent command (any bank, not just selected).
        - NOP (111)
            - Does nothing.
        - COMMAND INHIBIT (CS = high)
            - Same as NOP, does nothing.
    - Times:
        - Below, CLK means any clock, clk means our clock (6ns).
        - For CAS Latency = 3:
            - tCK = 6ns  (min clock period)
            - This is the one we want.
        - For CAS Latency = 2:
            - tCK = 7.5ns  (min clock period)
        - tAC = 5.4ns  (max access period after CLK; not sure how this is useful)
        - tOH = 2.5ns  (output data hold time, data is valid after CLK)
        - In general, for inputs setup is 1.5ns and hold is 0.8ns.
        - tRC = 60ns = 10clk (command period: REFRESH to REFRESH, ACTIVE to ACTIVE)
        - tRAS = 42ns = 7clk (command period: ACTIVE to PRECHARGE)
        - tRP = 15ns = 3clk (command period: PRECHARGE to ACTIVE or REFRESH)
        - tRCD = 15ns = 3clk (ACTIVE to READ/WRITE)
        - tRRD = 12ns = 2clk (Min time between ACTIVE in different banks)
        - tWR (aka tDPL) = 2CLK (last write data to PRECHARGE)
        - tDAL = 2CLK+tRP (write data to ACTIVE)
        - tT = 0.3ns to 1.2ns (transition time, not exactly sure what this is)
        - tREF = 64ms, must refresh all memory this often
        - tCCD = 1CLK (READ/WRITE to READ/WRITE)
        - tMRD = 2CLK
- Sequence:
- Initialization:
        - Wait until PLL locks.
        - Set CKE to HIGH. Can perhaps also just set CS to LOW.
        - Also DQM HIGH?
        - Wait 100Âµs during which only COMMAND INHIBIT or NOP is sent.
            - Tutorial code uses 200Âµs.
        - Send PRECHARGE to all banks.
        - Two AUTO REFRESH cycles (each tRC).
        - Send LOAD MODE commands.
            - A0-A2: Burst length (2^value, or 111 for full page, meaning until stopped).
                - We want 0 (burst length 1).
            - A3: 0 = Sequential, 1 = Interleaved. We want 0.
            - A4-A6: CAS latency (2 or 3).
                - We want 3, with 166 MHz clock.
            - A7-A8: 0.
            - A9:
                - 0 = Burst length applies to both READ and WRITE.
                - 1 = Burst length applies only to READ while WRITEs are always length 1.
                - Doesn't matter, our READ burst length is 1. Use 0.
            - A10-A11: 0.
        - Send NOP.
    - Write 12 bits on A and send ACTIVE command.
    - Write 8 bits on A and send READ or WRITE command. A10 specifies "auto precharge".
        - The 8 bits select a block of columns. See page 20 in PDF for details about how this
          works, because it's not continuous: the reads will wrap within the block if the
          start address is not the start of the block.
        - For READ:
            - After CAS latency, data is available every clock cycle.
        - For WRITE:
            - The data is made available every clock cycle, starting with WRITE.
        - A READ, WRITE, PRECHARGE, or BURST TERMINATE command can interrupt an
          ongoing READ command.
- Terms:
    - Open row is called "activate", close row is called "precharge".
    - tRCD = time from active to read/write.
    - tRP = time from precharge to active.
    - CAS latency = time between read requests and data
- Code structure:
    - Since DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N are the three control bits, have a single
        registered variable for the state, and:
        assign {DRAM_RAS_N, DRAM_CAS_N, DRAM_WE_N} = sdram_cmd;
    - Perhaps use (for RAS,CAS,WE):
        localparam [2:0] SDRAM_CMD_LOADMODE  = 3'b000;
        localparam [2:0] SDRAM_CMD_REFRESH   = 3'b001;
        localparam [2:0] SDRAM_CMD_PRECHARGE = 3'b010;
        localparam [2:0] SDRAM_CMD_ACTIVE    = 3'b011;
        localparam [2:0] SDRAM_CMD_WRITE     = 3'b100;
        localparam [2:0] SDRAM_CMD_READ      = 3'b101;
        localparam [2:0] SDRAM_CMD_NOP       = 3'b111;
- Refresh:
    - We have to refresh every row at least every 64ms.
    - Since we clear or read every buffer every 33.3ms (at 30 FPS), we're fine.
- Rough calculations for whether this is at all possible:
    - Each pixel is 12 bits.
    - Assume Z is 16 bits.
    - Want 30 FPS, so 33.3ms per frame.
    - Display is refreshed at 60 FPS, so two frame reads per frame write.
    - Each SDRAM row is 256 pixels.
    - Assuming 166 MHz, 3 cycles of latency.
    - Resolution: 640x480:
        - That's 307,200 pixels.
        - Each buffer is 307,200 words / 256 words/row = 1200 rows.
        - Each bank is 1 MW, so can fit all three buffers into one bank.
        - Clearing a color or Z buffer:
            - Writing to each row takes:
                - Set row (0-1199) and bank (0), send ACTIVE. Wait tRCD = 15ns <= 18ns = 3*6ns.
                - Set column (0-255) and bank (0), no auto-precharge, data, send WRITE.
                - Wait tWR (2CLK) after last write, so 1CLK NOP.
                - Set bank (0), one bank (A10 = 0), send PRECHARGE. Wait tRP = 15ns <= 18ns = 3*6ns.
                - For 256 columns, that's 3 + 256 + 1 + 3 = 263 clocks = 1,578ns.
            - Writing to a whole buffer takes:
                - 1,578ns * 1200 = 1,893,600ns = 1.9ms.
            - Clearing both buffers takes:
                - 1,893,600ns * 2 = 3,787,200ns = 3.8ms.
        - Reading the front buffer:
            - Reading from each row takes:
                - Set row (0-1199) and bank (0), send ACTIVE. Wait tRCD = 15ns <= 18ns = 3*6ns.
                - Set column (0-255) and bank (0), no auto-precharge, send READ.
                    - Wait CAS latency (3 clocks = 18ns), then read from data.
                - Set bank (0), one bank (A10 = 0), send PRECHARGE. Wait tRP = 15ns <= 18ns = 3*6ns.
                - For 256 columns, that's 3 + 3 + 256 + 3 = 265 clocks = 1,590ns.
            - Reading from a whole buffer takes:
                - 1,590ns * 1200 = 1,908,000ns = 1.9ms.
        - We're spending 5.7/33.3 = 18% of our time clearing two buffers and reading one.
        - That leaves us 82% to fill both buffers.
            - We could read both buffers and write both buffers 3.5 times.
    - Resolution 800x480:
        - That's 384,000 pixels.
        - Each buffer is 384,000 words / 256 words/row = 1500 rows.
        - Each bank is 1 MW, so can't fit all three buffers into one bank.
            - Use one bank per buffer.
        - Clearing a color or Z buffer:
            - Writing to each row takes:
                - Set row (0-1499) and bank (0), send ACTIVE. Wait tRCD = 15ns <= 18ns = 3*6ns.
                - Set column (0-255) and bank (0), no auto-precharge, data, send WRITE.
                - Wait tWR (2CLK) after last write, so 1CLK NOP.
                - Set bank (0), one bank (A10 = 0), send PRECHARGE. Wait tRP = 15ns <= 18ns = 3*6ns.
                - For 256 columns, that's 3 + 256 + 1 + 3 = 263 clocks = 1,578ns.
            - Writing to a whole buffer takes:
                - 1,578ns * 1500 = 2,367,000ns = 2.4ms.
            - Clearing both buffers takes:
                - 2,367,000ns * 2 = 4,734,000ns = 4.7ms.
        - Reading the front buffer:
            - Reading from each row takes:
                - Set row (0-1499) and bank (0), send ACTIVE. Wait tRCD = 15ns <= 18ns = 3*6ns.
                - Set column (0-255) and bank (0), no auto-precharge, send READ.
                    - Wait CAS latency (3 clocks = 18ns), then read from data.
                - Set bank (0), one bank (A10 = 0), send PRECHARGE. Wait tRP = 15ns <= 18ns = 3*6ns.
                - For 256 columns, that's 3 + 3 + 256 + 3 = 265 clocks = 1,590ns.
            - Reading from a whole buffer takes:
                - 1,590ns * 1500 = 2,385,000ns = 2.4ms.
            - Must read twice per written frame:
                - 2,385,000ns * 2 = 4,770,000ns = 4.8ms.
        - Total time = 4,734,000ns + 4,770,000ns = 9,504,000ns = 9.5ms.
        - We're spending 9.5/33.3 = 29% of our time clearing two buffers and reading twice.
        - That leaves us 71% to fill both buffers.
            - That's equivalent of almost 10 full writes or full reads.
- Implementation notes:
    - Use a state machine.
    - One state is WAIT, which takes both a count and a next-state parameter.
- To do:
    - Read this: https://fpga4fun.com/SDRAM.html
    - Investigate "SignalTap" tool.
    - Fill RAM with a pattern.
        - One color per memory row. Should be just over 3 colors per screen row.
    - Continuously read rows and fill FIFO.

